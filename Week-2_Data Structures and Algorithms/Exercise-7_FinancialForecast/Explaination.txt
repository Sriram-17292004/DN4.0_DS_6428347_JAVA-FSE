This Java program performs financial forecasting using a recursive algorithm to calculate the future value of an investment over a given number of years based on a fixed annual growth rate. The futureGrowth method is the core recursive function that takes the number of years (year), the annual growth rate (annualGrowthRate), and the initial investment amount (initialInvestment). The recursion continues to call itself by decrementing the year until it reaches 0, which is the base case returning the initial investment. Each recursive step multiplies the result by (1 + annualGrowthRate), effectively applying compound growth year over year. In the main method, the function is called with an initial investment of 1000 units, a growth rate of 25%, and a forecast period of 8 years. The final future value is printed with two decimal precision.

The time complexity of this recursive algorithm is O(n), where n is the number of years, because it makes one recursive call per year. The space complexity is also O(n) due to the recursion stack, which grows linearly with the number of recursive calls. For small n, this is efficient and readable, but for large values, an iterative approach would be more optimal to avoid stack overflow.